.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Polygon::Clip 3"
.TH Math::Polygon::Clip 3 "2011-09-19" "perl v5.22.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Polygon::Clip \- frame a polygon in a square
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Math::Polygon::Clip
\&   is a Exporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my @poly  = ( [1,2], [2,4], [5,7], [1, 2] );
\& my @box   = ( $xmin, $ymin, $xmax, $ymax );
\&
\& my $boxed = polygon_clip \e@box, @poly;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Cut-off all parts of the polygon which are outside the box
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBpolygon_fill_clip1\fR(ARRAY-BOX, LIST-OF-POINTS)" 4
.IX Item "polygon_fill_clip1(ARRAY-BOX, LIST-OF-POINTS)"
Clipping a polygon into rectangles can be done in various ways.
With this algorithm (which I designed myself, but may not be new), the
parts of the polygon which are outside the \s-1BOX\s0 are mapped on the borders.
The polygon stays in one piece.
.Sp
Returned is one list of points, which is cleaned from double points,
spikes and superfluous intermediate points.
.IP "\fBpolygon_fill_clip2\fR(ARRAY-BOX, LIST-OF-POINTS)" 4
.IX Item "polygon_fill_clip2(ARRAY-BOX, LIST-OF-POINTS)"
To be implemented.  The polygon falls apart in fragments, which are not
connected: paths which are followed in two directions are removed.
This is required by some applications, like polygons used in geographical
context (country contours and such).
.IP "\fBpolygon_fill_clip3\fR(ARRAY-BOX, OUT-POLY, [\s-1IN\-POLYS\s0])" 4
.IX Item "polygon_fill_clip3(ARRAY-BOX, OUT-POLY, [IN-POLYS])"
To be implemented.  A surrounding polygon, with possible
inclussions.
.IP "\fBpolygon_line_clip\fR(ARRAY-BOX, LIST-OF-POINTS)" 4
.IX Item "polygon_line_clip(ARRAY-BOX, LIST-OF-POINTS)"
Returned is a list of \s-1ARRAYS \s0(possibly 0 long) containing line pieces
from the input polygon (or line).
.Sp
example:
.Sp
.Vb 5
\& my @points = ( [1,2], [2,3], [2,0], [1,\-1], [1,2] );
\& my @bbox   = ( 0, \-2, 2, 2 );
\& my @l      = polygon_line_clip \e@bbox, @points;
\& print scalar @l;      # 1, only one piece found
\& my @first = @{$l[0]}; # first is [2,0], [1,\-1], [1,2]
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Math-Polygon distribution version 1.02,
built on September 19, 2011. Website: \fIhttp://perl.overmeer.net/geo/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2004,2006\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
