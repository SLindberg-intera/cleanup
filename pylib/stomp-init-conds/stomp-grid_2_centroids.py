"""
Author:         Jacob B Fullerton
Date:           November 6, 2020
Company:        INTERA Inc.
Usage:          This code is meant to read a STOMP grid card, then generate an XYZ file of cell centroids

Pseudo Code:    The code in general works in the following manner:
                1.  Read STOMP input file
                2.  Build list of centroid coordinates
                3.  Export final output to file
"""

import argparse
from pathlib import Path


# ----------------------------------------------------------------------------------------------------------------------
# Utility functions


def file_path(mystr):
    if Path(mystr).is_file():
        return mystr
    else:
        raise FileNotFoundError("File path provided does not exist: {}".format(mystr))


def dir_path(mystr):
    if Path(mystr).is_dir():
        return mystr
    else:
        raise IsADirectoryError("Path provided is not a directory: {}".format(mystr))


def is_int(mystr):
    try:
        int(mystr)
        return True
    except ValueError:
        return False


# ----------------------------------------------------------------------------------------------------------------------
# User Input (Parser)


parser = argparse.ArgumentParser()
parser.add_argument('-i', '--STOMP_input_file',
                    dest='STOMP_input_file',
                    type=file_path,
                    required=True,
                    help='Provide the path to the STOMP input file containing at least the grid card.'
                    )
parser.add_argument('-o', '--output_directory',
                    dest='output_directory',
                    type=dir_path,
                    help='Provide the path to the output directory for saving the output file.'
                    )
parser.add_argument('-f', '--output_file_name',
                    dest='output_file_name',
                    type=str,
                    default='STOMP_centroids.csv',
                    help='The name of the output file, default is [STOMP_centroids.csv].'
                    )
parser.add_argument('-m', '--model_name',
                    dest='model_name',
                    type=str,
                    default='ModelName',
                    help='The name of the model, default is [ModelName].'
                    )
parser.add_argument('--out_format',
                    dest='out_format',
                    type=str.upper,
                    choices=['LEAPFROG', 'KT3D'],
                    default='LEAPFROG',
                    help='This flag should be used if a specific output format is desired. Accepted options consist \n'
                         'of "KT3D" or "LEAPFROG". The default is [LEAPFROG]. These formats correspond with the\n'
                         'software intended to read the output file from this script.'
                    )
args = parser.parse_args()


# ----------------------------------------------------------------------------------------------------------------------
# Primary functions


def parse_STOMP_grid(path, grid_card='~grid card'):
    """
    This will take a STOMP input file, expecting the key phrase "~Grid Card", which will parse the subsequent lines
    (excluding comments). This is only capable of handling cartesian coordinate systems with rectangular STOMP cells.
    :param path:        STOMP input file path
    :param grid_card:   The key phrase to search out that marks the beginning of the grid card to parse
    :return:
    """
    with open(path, 'r') as stomp_file:
        while True:
            line = next(stomp_file)
            if grid_card.lower() in line.lower():
                while True:
                    line = line.replace('\r', '').replace('\n', '').split(',')
                    if is_int(line[0]):
                        # Want to skip the line that tells STOMP how many cells to expect ("greedy parsing")
                        line = next(stomp_file)
                        break
                    else:
                        line = next(stomp_file)
                # This should now be the first line of the STOMP grid file dictating the "i-dir" centroid locations
                i_list = parse_grid_line(line)
                line = next(stomp_file)
                j_list = parse_grid_line(line)
                line = next(stomp_file)
                k_list = parse_grid_line(line)
                break
    return i_list, j_list, k_list


def parse_grid_line(line_str):
    """
    Expects a STOMP grid card line dictating a cartesian coordinate system. An example of such a line might be:
        572800,m,39@10,m,56@5,m,43@10,m,
    The expected return value will be a list of values, generated by expanding the STOMP grid card line.
    :param line_str:
    :return:
    """
    line = line_str.replace('\r', '').replace('\n', '').split(',')
    val = float(line[0])
    centroids = [val]
    spacings = [tuple(map(float, val.split('@'))) for val in line if '@' in val]
    for disc in spacings:
        for i in range(int(disc[0])):
            val = val + disc[1]
            centroids.append(val)
    # Because the grid card specifies the STOMP surfaces, take a rolling average with a window size of 2 and truncate
    # the final value. What remains are the centroid values.
    for i in range(len(centroids) - 1):
        centroids[i] = (centroids[i] + centroids[i + 1]) / 2
    centroids = centroids[:-1]
    return centroids


def gen_leapfrog_text(i_list, j_list, k_list):
    """
    Prepares a string from the lists in 3D that conforms with the formatting requirements for use in Leapfrog Models.
    :param i_list:  List of i-dir locations
    :param j_list:  List of j-dir locations
    :param k_list:  List of k-dir locations
    :return:
    """
    cell_centers = ['I,J,K,X,Y,Z,STOMP Model']
    i_counter = 0
    for i in i_list:
        i_counter += 1
        j_counter = 0
        for j in j_list:
            j_counter += 1
            k_counter = 0
            for k in k_list:
                k_counter += 1
                cell_centers.append('{0},{1},{2},{3},{4},{5},{6}'.format(
                    i_counter,
                    j_counter,
                    k_counter,
                    i,
                    j,
                    k,
                    args.model_name
                ))
    cell_centers = '\n'.join(cell_centers)
    return cell_centers


def gen_kt3d_text(i_list, j_list, k_list, modelname):
    """
    Prepares a string from the lists in 3D that conforms with the formatting requirements for use in KT3D GSLIB Models.
    :param i_list:  List of i-dir locations
    :param j_list:  List of j-dir locations
    :param k_list:  List of k-dir locations
    :return:
    """
    cell_centers = [modelname, '4', 'Xlocation', 'Ylocations', 'Zlocation', 'Primary']
    primary_counter = 1
    for k in k_list:
        for j in j_list:
            for i in i_list:
                cell_centers.append('{0}\t{1}\t{2}\t{3}'.format(
                    i,
                    j,
                    k,
                    primary_counter
                ))
                primary_counter += 1
    cell_centers = '\n'.join(cell_centers)
    return cell_centers


# ----------------------------------------------------------------------------------------------------------------------
# Main Program
if __name__ == '__main__':
    # Parse the STOMP input file to pull out the STOMP grid cell centroids in x, y, and z directions
    i_dir, j_dir, k_dir = parse_STOMP_grid(args.STOMP_input_file)
    # Build a unified list in the output file
    if args.out_format == 'LEAPFROG':
        centroid_text = gen_leapfrog_text(i_dir, j_dir, k_dir)
    elif args.out_format == 'KT3D':
        centroid_text = gen_kt3d_text(i_dir, j_dir, k_dir, args.model_name)
    # Write to a file
    outfile = Path(args.output_directory, args.output_file_name)
    outfile.write_text(data=centroid_text)
