.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Geometry::Planar::GPC::PolygonXS 3"
.TH Math::Geometry::Planar::GPC::PolygonXS 3 "2017-08-06" "perl v5.22.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Geometry::Planar::GPC::PolygonXS \- OO wrapper to gpc library
(translated from Inline\-based Math::Geometry::Planar::GPC::Polygon to XS)
.SH "Status"
.IX Header "Status"
Successfully used in minor production use under perl 5.6.1 and 5.8.3.
Your mileage may vary  (see \s-1NO WARRANTY.\s0)
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&  Eric L. Wilhelm
\&  ewilhelm at sbcglobal dot net
\&  http://pages.sbcglobal.net/mycroft/
.Ve
.SH "Copyright"
.IX Header "Copyright"
Copyright 2004 Eric L. Wilhelm
.SH "License"
.IX Header "License"
This module and its C source code (functions.c) are distributed under
the same terms as Perl.  See the Perl source package for details.
.PP
You may use this software under one of the following licenses:
.PP
.Vb 4
\&  (1) GNU General Public License
\&    (found at http://www.gnu.org/copyleft/gpl.html)
\&  (2) Artistic License
\&    (found at http://www.perl.com/pub/language/misc/Artistic.html)
.Ve
.PP
The General Polygon Clipping library (gpc.c and gpc.h) is distributed as
\&\*(L"free for non-commercial use\*(R".  See gpc.c for details.  A copy of these
files has been included with this distribution strictly for convenience
purposes, but \s-1YOU ARE RESPONSIBLE FOR ADHERING TO BOTH THE GPC LICENSE
AND THE LICENSE OF THIS MODULE. \s0 Note that the C library is authored by
Alan Murta.
.PP
You may want to check the \s-1GPC\s0 home page for a more current version:
.PP
.Vb 1
\&  http://www.cs.man.ac.uk/aig/staff/alan/software/
.Ve
.SH "Portability"
.IX Header "Portability"
This module successfully compiles on i386 and solaris architectures
according to the cpan testers results.  Hopefully, versions after 0.04
will work on \s-1WIN32.  I\s0 don't have any non-linux machines, so feel free
to send patches.
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
This code comes with \s-1ABSOLUTELY NO WARRANTY\s0 of any kind.
.SH "Changes"
.IX Header "Changes"
.Vb 6
\&  0.01 \- First public release.
\&  0.02 \- Added API documentation.
\&  0.03 \- Fix to allocation error.
\&         Possibly Fixed WIN32 compile problem?
\&  0.04 \- Twiddling with WIN32 compile problem (last try)
\&  0.05 \- Corrected license statements.
.Ve
.SH "Constructors"
.IX Header "Constructors"
.SS "new"
.IX Subsection "new"
Traditional constructor, returns a blessed reference to the underlying C struct.
.PP
.Vb 2
\&  use Math::Geometry::Planar::GPC::Polygon;
\&  my $gpc = Math::Geometry::Planar::GPC::Polygon\->new();
.Ve
.SS "new_gpc"
.IX Subsection "new_gpc"
An optionally imported constructor, for those of you who don't like to
type so much.
.PP
.Vb 2
\&  use Math::Geometry::Planar::GPC::Polygon qw(new_gpc);
\&  my $gpc = new_gpc();
.Ve
.SH "Bound Functions"
.IX Header "Bound Functions"
These are the functions provide by the Inline-C code.  See functions.c
in the source package for intimate details.
.SS "from_file"
.IX Subsection "from_file"
Loads a from a file into your gpc object.  See the \s-1GPC\s0 library
documentation for details.
.PP
.Vb 1
\&  $gpc\->from_file($filename, $want_hole);
.Ve
.SS "to_file"
.IX Subsection "to_file"
Writes to a file.
.PP
.Vb 1
\&  $gpc\->to_file($filename, $want_hole);
.Ve
.SS "clip_to"
.IX Subsection "clip_to"
Clips the \f(CW$gpc\fR object to the \f(CW$othergpc\fR object.
.PP
\&\f(CW$action\fR may be any of the following:
.PP
.Vb 3
\&  INTERSECT
\&  DIFFERENCE
\&  UNION
\&
\&  $gpc\->clip_to($othergpc, $action);
.Ve
.PP
Be wary.  This interface may need to change.
.SS "add_polygon"
.IX Subsection "add_polygon"
Adds a polygon to the gpc object.  \f(CW@points\fR is a list of array references
which describe the point of the polygon.  \f(CW$hole\fR is 1 or 0 (0 to not add
a hole.)
.PP
.Vb 1
\&  $gpc\->add_polygon(\e@points, $hole);
.Ve
.SS "get_polygons"
.IX Subsection "get_polygons"
Gets the polygons from the gpc object.  I'm not sure how to tell you if
they are holes or not.  \f(CW@pgons\fR will be a list of refs to lists of refs.
.PP
.Vb 1
\&  @pgons = $gpc\->get_polygons();
.Ve
.SH "Helper Functions"
.IX Header "Helper Functions"
Pure-perl implementation from here down.
.SS "as_string"
.IX Subsection "as_string"
.Vb 1
\&  $gpc\->as_string();
.Ve
