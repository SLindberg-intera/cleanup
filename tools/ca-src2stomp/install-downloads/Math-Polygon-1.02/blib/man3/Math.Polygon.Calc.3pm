.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Polygon::Calc 3"
.TH Math::Polygon::Calc 3 "2011-09-19" "perl v5.22.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Polygon::Calc \- Simple polygon calculations
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Math::Polygon::Calc
\&   is a Exporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my @poly = ( [1,2], [2,4], [5,7], [1, 2] );
\&
\& my ($xmin, $ymin, $xmax, $ymax) = polygon_bbox @poly;
\&
\& my $area = polygon_area @poly;
\& MY $L    = polygon_perimeter @poly;
\& if(polygon_is_clockwise @poly) { ... };
\& 
\& my @rot  = polygon_start_minxy @poly;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package contains a wide variaty of relatively easy polygon
calculations.  More complex calculations are put in separate
packages.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBpolygon_area\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_area(LIST-OF-POINTS)"
Returns the area enclosed by the polygon.  The last point of the list
must be the same as the first to produce a correct result.
.Sp
The algorithm was found at <http://mathworld.wolfram.com/PolygonArea.html>,
and sounds:
.Sp
.Vb 1
\& A = abs( 1/2 * (x1y2\-x2y1 + x2y3\-x3y2 ...)
.Ve
.IP "\fBpolygon_bbox\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_bbox(LIST-OF-POINTS)"
Returns a list with four elements: (xmin, ymin, xmax, ymax), which describe
the bounding box of the polygon (all points of the polygon are within that
area.
.IP "\fBpolygon_beautify\fR([\s-1HASH\s0], LIST-OF-POINTS)" 4
.IX Item "polygon_beautify([HASH], LIST-OF-POINTS)"
Polygons, certainly after some computations, can have a lot of
horrible artifacts: points which are double, spikes, etc.  This
functions provided by this module beautify
The optional \s-1HASH\s0 contains the \s-1OPTIONS:\s0
.Sp
.Vb 3
\& \-Option        \-\-Default
\&  remove_between  <false>
\&  remove_spikes   <false>
.Ve
.RS 4
.IP "remove_between => \s-1BOOLEAN\s0" 2
.IX Item "remove_between => BOOLEAN"
Simple points in-between are always removed, but more complex
points are not: when the line is not parallel to one of the axes,
more intensive calculations must take place.  This will only be
done when this flags is set.
\&\s-1NOT IMPLEMENTED YET\s0
.IP "remove_spikes => \s-1BOOLEAN\s0" 2
.IX Item "remove_spikes => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.IP "\fBpolygon_centroid\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_centroid(LIST-OF-POINTS)"
.PD
Returns the centroid location of the polygon.  The last point of the list
must be the same as the first to produce a correct result.
.Sp
The algorithm was found at
\&\fIhttp://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon\fR
.IP "\fBpolygon_clockwise\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_clockwise(LIST-OF-POINTS)"
Be sure the polygon points are in clockwise order.
.IP "\fBpolygon_contains_point\fR(\s-1POINT,\s0 LIST-OF-POINTS)" 4
.IX Item "polygon_contains_point(POINT, LIST-OF-POINTS)"
Returns true if the point is unside the closed polygon.
.IP "\fBpolygon_counter_clockwise\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_counter_clockwise(LIST-OF-POINTS)"
Be sure the polygon points are in counter-clockwise order.
.IP "\fBpolygon_equal\fR(ARRAY-OF-POINTS, ARRAY-OF-POINTS, [\s-1TOLERANCE\s0])" 4
.IX Item "polygon_equal(ARRAY-OF-POINTS, ARRAY-OF-POINTS, [TOLERANCE])"
Compare two polygons, on the level of points. When the polygons are
the same but rotated, this will return false. See \fIpolygon_same()\fR.
.IP "\fBpolygon_is_clockwise\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_is_clockwise(LIST-OF-POINTS)"
.PD 0
.IP "\fBpolygon_is_closed\fR(\s-1POINTS\s0)" 4
.IX Item "polygon_is_closed(POINTS)"
.IP "\fBpolygon_perimeter\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_perimeter(LIST-OF-POINTS)"
.PD
The length of the line of the polygon.  This can also be used to compute
the length of any line: of the last point is not equal to the first, then
a line is presumed; for a polygon they must match.
.Sp
This is simply Pythagoras.
.Sp
.Vb 1
\& $l = sqrt((x1\-x0)^2 + (y1\-y0)^2) + sqrt((x2\-x1)^2+(y2\-y1)^2) + ...
.Ve
.IP "\fBpolygon_same\fR(ARRAY-OF-POINTS, ARRAY-OF-POINTS, [\s-1TOLERANCE\s0])" 4
.IX Item "polygon_same(ARRAY-OF-POINTS, ARRAY-OF-POINTS, [TOLERANCE])"
Compare two polygons, where the polygons may be rotated wrt each
other. This is (much) slower than \fIpolygon_equal()\fR, but some algorithms
will cause un unpredictable rotation in the result.
.IP "\fBpolygon_start_minxy\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_start_minxy(LIST-OF-POINTS)"
Returns the polygon, where the point which is closest to the left-bottom
corner of the bounding box is made first.
.IP "\fBpolygon_string\fR(LIST-OF-POINTS)" 4
.IX Item "polygon_string(LIST-OF-POINTS)"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Math-Polygon distribution version 1.02,
built on September 19, 2011. Website: \fIhttp://perl.overmeer.net/geo/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2004,2006\-2011 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
